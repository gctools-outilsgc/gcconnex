DROP PROCEDURE IF EXISTS GET_suggestedFriends;
CREATE PROCEDURE `GET_suggestedFriends`(IN `UserGUID` BIGINT(20),IN Sug_Limit INT) BEGIN select fof.guid_two,ue.username FROM prefix_entities as e INNER JOIN prefix_users_entity ue ON ue.guid = e.guid INNER JOIN prefix_entity_relationships fr ON fr.guid_one = UserGUID AND fr.relationship = 'friend' INNER JOIN prefix_entity_relationships fof ON fof.guid_one = fr.guid_two AND fof.relationship = 'friend' WHERE ue.banned='no' and e.guid NOT IN (SELECT f.guid_two FROM prefix_entity_relationships f WHERE f.guid_one = UserGUID AND f.relationship = 'friend') and fof.guid_two = e.guid and e.guid != UserGUID GROUP BY e.guid ORDER BY fof.guid_two desc, ue.last_action DESC LIMIT Sug_Limit;END;
DROP VIEW IF EXISTS veducation;
CREATE VIEW `veducation` AS SELECT md.entity_guid AS entity_guid, md.name_id AS name_id,md.owner_guid AS owner_guid,ent_str.string AS entityName,ent_str2.string AS Value FROM ((((prefix_metadata as md JOIN prefix_entities as ent ON ((md.entity_guid = ent.guid))) JOIN prefix_metastrings as ent_str ON ((md.name_id = ent_str.id))) JOIN prefix_metastrings as ent_str2 ON ((md.value_id = ent_str2.id))) JOIN prefix_entity_subtypes as ent_st ON ((ent.subtype = ent_st.id))) WHERE (ent_st.subtype = 'education');
DROP VIEW IF EXISTS veducation_pivot;
CREATE VIEW `veducation_pivot` AS SELECT `veducation`.`owner_guid` AS `owner_guid`,`veducation`.`entity_guid` AS `entity_guid`, MAX(IF((`veducation`.`entityName` = 'school'),`veducation`.`Value`, NULL)) AS `school`, MAX(IF((`veducation`.`entityName` = 'startdate'), `veducation`.`Value`, NULL)) AS `startdate`, MAX(IF((`veducation`.`entityName` = 'startyear'), `veducation`.`Value`, NULL)) AS `startyear`, MAX(IF((`veducation`.`entityName` = 'enddate'), `veducation`.`Value`, NULL)) AS `enddate`, MAX(IF((`veducation`.`entityName` = 'endyear'), `veducation`.`Value`, NULL)) AS `endyear`, MAX(IF((`veducation`.`entityName` = 'ongoing'), `veducation`.`Value`, NULL)) AS `ongoing`, MAX(IF((`veducation`.`entityName` = 'field'),`veducation`.`Value`,NULL)) AS `field`,MAX(IF((`veducation`.`entityName` = 'degree'),`veducation`.`Value`,NULL)) AS `degree` FROM `veducation` GROUP BY `veducation`.`entity_guid`;
DROP VIEW IF EXISTS vexperience;
CREATE VIEW `vexperience` AS SELECT `MD`.`entity_guid` AS `entity_guid`,`MD`.`name_id` AS `name_id`,`MD`.`owner_guid` AS `owner_guid`,`ENT_Str`.`string` AS `entityName`,`ENT_Str2`.`string` AS `Value` FROM ((((prefix_metadata as MD JOIN prefix_entities as ENT ON ((`MD`.`entity_guid` = `ENT`.`guid`))) JOIN prefix_metastrings as ENT_Str ON ((`MD`.`name_id` = `ENT_Str`.`id`))) JOIN prefix_metastrings as ENT_Str2 ON ((`MD`.`value_id` = `ENT_Str2`.`id`))) JOIN prefix_entity_subtypes as ENT_ST ON ((`ENT`.`subtype` = `ENT_ST`.`id`))) WHERE (`ENT_ST`.`subtype` = 'experience');
DROP VIEW IF EXISTS vexperience_pivot;
CREATE VIEW `vexperience_pivot` AS SELECT `vexperience`.`owner_guid` AS `owner_guid`,`vexperience`.`entity_guid` AS `entity_guid`, MAX(IF((`vexperience`.`entityName` = 'organization'),`vexperience`.`Value`,NULL)) AS `organization`,MAX(IF((`vexperience`.`entityName` = 'startdate'),`vexperience`.`Value`,NULL)) AS `startdate`,MAX(IF((`vexperience`.`entityName` = 'startyear'),`vexperience`.`Value`,NULL)) AS `startyear`,MAX(IF((`vexperience`.`entityName` = 'enddate'),`vexperience`.`Value`,NULL)) AS `enddate`,MAX(IF((`vexperience`.`entityName` = 'endyear'),`vexperience`.`Value`,NULL)) AS `endyear`,MAX(IF((`vexperience`.`entityName` = 'ongoing'),`vexperience`.`Value`,NULL)) AS `ongoing`,MAX(IF((`vexperience`.`entityName` = 'responsibilities'),`vexperience`.`Value`,NULL)) AS `responsibilities` FROM `vexperience` GROUP BY `vexperience`.`entity_guid`;
CREATE TABLE IF NOT EXISTS `prefix_elmah_log` (`errorid` int(11) NOT NULL AUTO_INCREMENT,`appl_name` varchar(255),`error_type` varchar(50),`server_name` varchar(255),`server_ip` varchar(20),`user_guid` bigint(20),`time_created` datetime,`username` text,`error_messages` BLOB,`error_stacktrace` BLOB,PRIMARY KEY (`errorid`)) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;